{"version":3,"sources":["../src/Sky.js"],"names":["MAX_SCRIPT_BLOCK","DEFAULT_VERSION","DEFAULT_LOCKTIME","DEFAULT_SEQUENCE","SIGHASH_ALL","OP_PUSHDATA1","OP_HASH160","HASH_SIZE","OP_EQUALVERIFY","OP_CHECKSIG","Btc","transport","decorateAppAPIMethods","buffer","update","digest","path","verify","segwit","paths","p1","p2","Buffer","alloc","length","forEach","element","index","writeUInt32BE","send","then","publicKeyLength","response","addressLength","publicKey","slice","toString","skycoinAddress","chainCode","getWalletPublicKey_private","transactionData","indexLookup","data","firstRound","prefix","concat","trustedInput","transaction","inputs","outputs","locktime","Error","processScriptBlocks","script","sequence","scriptBlocks","offset","blockSize","push","getTrustedInputRaw","scriptBlock","processInputs","input","prevout","createVarint","processOutputs","output","amount","version","timestamp","sha","serializeTransaction","hash","writeUInt32LE","newTransaction","bip143","overwinter","nVersionGroupId","startUntrustedHashTransactionInputRaw","i","from","value","outputScript","lockTime","sigHashType","expiryHeight","pathsBuffer","lockTimeBuffer","result","messageHex","message","toSend","maxChunkSize","chunkSize","writeUInt16BE","copy","v","r","s","associatedKeysets","changePath","outputScriptHex","initialTimestamp","additionals","hasTimestamp","undefined","startTime","Date","now","useBip143","includes","nullScript","nullPrevout","defaultVersion","trustedInputs","regularOutputs","signatures","publicKeys","firstRun","resuming","targetTransaction","getTrustedInputCall","getTrustedInputBIP143","bind","getTrustedInput","nExpiryHeight","extraData","compressPublicKey","Math","floor","startUntrustedHashTransactionInput","provideOutputFullChangePath","hashOutputFull","signTransaction","hashPublicKey","pseudoTX","pseudoTrustedInputs","signature","witness","signatureSize","keySize","tmpScriptData","transactionVersion","prefixBuffer","transactionHex","isSegwitSupported","hasExtraData","equals","varint","getVarint","numberInputs","numberOutputs","witnessScript","outputBuffer","skipWitness","inputBuffer","useWitness","serializeTransactionOutputs","console","log"],"mappings":"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","file":"Sky.js","sourcesContent":["//@flow\n\n// TODO future refactoring\n// - drop utils.js & refactoring with async/await style\n// - try to avoid every place we do hex<>Buffer conversion. also accept Buffer as func parameters (could accept both a string or a Buffer in the API)\n// - there are redundant code across apps (see Eth vs Btc). we might want to factorize it somewhere. also each app apdu call should be abstracted it out as an api\nimport { foreach, doIf, asyncWhile, splitPath, eachSeries } from \"./utils\";\nimport type Transport from \"@ledgerhq/hw-transport\";\nimport createHash from \"create-hash\";\n\nconst MAX_SCRIPT_BLOCK = 50;\nconst DEFAULT_VERSION = 1;\nconst DEFAULT_LOCKTIME = 0;\nconst DEFAULT_SEQUENCE = 0xffffffff;\nconst SIGHASH_ALL = 1;\nconst OP_PUSHDATA1 = 0x76;\nconst OP_HASH160 = 0xa9;\nconst HASH_SIZE = 0x14;\nconst OP_EQUALVERIFY = 0x88;\nconst OP_CHECKSIG = 0xac;\n/**\n * Skycoin API.\n *\n * @example\n * import Btc from \"@ledgerhq/hw-app-sky\";\n * const sky = new Btc(transport)\n */\nexport default class Btc {\n  transport: Transport<*>;\n\n  constructor(transport: Transport<*>) {\n    this.transport = transport;\n    transport.decorateAppAPIMethods(\n      this,\n      [\n        \"getWalletPublicKey\",\n        \"signP2SHTransaction\",\n        \"signMessageNew\",\n        \"createPaymentTransactionNew\"\n      ],\n      \"SKY\"\n    );\n  }\n\n  hashPublicKey(buffer: Buffer) {\n    return createHash(\"rmd160\")\n      .update(\n        createHash(\"sha256\")\n          .update(buffer)\n          .digest()\n      )\n      .digest();\n  }\n\n  getWalletPublicKey_private(\n    path: string,\n    verify: boolean,\n    segwit: boolean\n  ): Promise<{\n    publicKey: string,\n    skycoinAddress: string,\n    chainCode: string\n  }> {\n    const paths = splitPath(path);\n    var p1 = 0x00;\n    var p2 = 0x00;\n    if (verify === true) {\n      p1 = 0x01;\n    }\n    if (segwit == true) {\n      p2 = 0x01;\n    }\n    const buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport.send(0xe0, 0x40, p1, p2, buffer).then(response => {\n      const publicKeyLength = response[0];\n      const addressLength = response[1 + publicKeyLength];\n      const publicKey = response.slice(1, 1 + publicKeyLength).toString(\"hex\");\n      const skycoinAddress = response\n        .slice(1 + publicKeyLength + 1, 1 + publicKeyLength + 1 + addressLength)\n        .toString(\"ascii\");\n      const chainCode = response\n        .slice(\n          1 + publicKeyLength + 1 + addressLength,\n          1 + publicKeyLength + 1 + addressLength + 32\n        )\n        .toString(\"hex\");\n      return { publicKey, skycoinAddress, chainCode };\n    });\n  }\n\n  /**\n   * @param path a BIP 32 path\n   * @param segwit use segwit\n   * @example\n   * sky.getWalletPublicKey(\"44'/0'/0'/0\").then(o => o.skycoinAddress)\n   */\n  getWalletPublicKey(\n    path: string,\n    verify?: boolean = false,\n    segwit?: boolean = false\n  ): Promise<{\n    publicKey: string,\n    skycoinAddress: string,\n    chainCode: string\n  }> {\n    return this.getWalletPublicKey_private(path, verify, segwit);\n  }\n\n  getTrustedInputRaw(\n    transactionData: Buffer,\n    indexLookup: ?number\n  ): Promise<string> {\n    let data;\n    let firstRound = false;\n    if (typeof indexLookup === \"number\") {\n      firstRound = true;\n      const prefix = Buffer.alloc(4);\n      prefix.writeUInt32BE(indexLookup, 0);\n      data = Buffer.concat(\n        [prefix, transactionData],\n        transactionData.length + 4\n      );\n    } else {\n      data = transactionData;\n    }\n    return this.transport\n      .send(0xe0, 0x42, firstRound ? 0x00 : 0x80, 0x00, data)\n      .then(trustedInput =>\n        trustedInput.slice(0, trustedInput.length - 2).toString(\"hex\")\n      );\n  }\n\n  getTrustedInput(\n    indexLookup: number,\n    transaction: Transaction\n  ): Promise<string> {\n    const { inputs, outputs, locktime } = transaction;\n    if (!outputs || !locktime) {\n      throw new Error(\"getTrustedInput: locktime & outputs is expected\");\n    }\n\n    const processScriptBlocks = (script, sequence) => {\n      const scriptBlocks = [];\n      let offset = 0;\n      while (offset !== script.length) {\n        let blockSize =\n          script.length - offset > MAX_SCRIPT_BLOCK\n            ? MAX_SCRIPT_BLOCK\n            : script.length - offset;\n        if (offset + blockSize !== script.length) {\n          scriptBlocks.push(script.slice(offset, offset + blockSize));\n        } else {\n          scriptBlocks.push(\n            Buffer.concat([script.slice(offset, offset + blockSize), sequence])\n          );\n        }\n        offset += blockSize;\n      }\n      return eachSeries(scriptBlocks, scriptBlock =>\n        this.getTrustedInputRaw(scriptBlock)\n      );\n    };\n\n    const processInputs = () => {\n      return eachSeries(inputs, input => {\n        const data = Buffer.concat([\n          input.prevout,\n          this.createVarint(input.script.length)\n        ]);\n        return this.getTrustedInputRaw(data).then(() =>\n          // iteration (eachSeries) ended\n          // TODO notify progress\n          // deferred.notify(\"input\");\n          processScriptBlocks(input.script, input.sequence)\n        );\n      }).then(() => {\n        const data = this.createVarint(outputs.length);\n        return this.getTrustedInputRaw(data);\n      });\n    };\n\n    const processOutputs = () =>\n      eachSeries(outputs, output => {\n        let data = output.amount;\n        data = Buffer.concat([\n          data,\n          this.createVarint(output.script.length),\n          output.script\n        ]);\n        return this.getTrustedInputRaw(data).then(() => {\n          // iteration (eachSeries) ended\n          // TODO notify progress\n          // deferred.notify(\"output\");\n        });\n      }).then(() => this.getTrustedInputRaw(locktime));\n\n    const data = Buffer.concat([\n      transaction.version,\n      transaction.timestamp || Buffer.alloc(0),\n      this.createVarint(inputs.length)\n    ]);\n    return this.getTrustedInputRaw(data, indexLookup)\n      .then(processInputs)\n      .then(processOutputs);\n  }\n\n  async getTrustedInputBIP143(indexLookup: number, transaction: Transaction) {\n    if (!transaction) {\n      throw new Error(\"getTrustedInputBIP143: missing tx\");\n    }\n    let sha = createHash(\"sha256\");\n    sha.update(this.serializeTransaction(transaction, true));\n    let hash = sha.digest();\n    sha = createHash(\"sha256\");\n    sha.update(hash);\n    hash = sha.digest();\n    const data = Buffer.alloc(4);\n    data.writeUInt32LE(indexLookup, 0);\n    const { outputs, locktime } = transaction;\n    if (!outputs || !locktime) {\n      throw new Error(\"getTrustedInputBIP143: locktime & outputs is expected\");\n    }\n    if (!outputs[indexLookup]) {\n      throw new Error(\"getTrustedInputBIP143: wrong index\");\n    }\n    hash = Buffer.concat([hash, data, outputs[indexLookup].amount]);\n    return await hash.toString(\"hex\");\n  }\n\n  getVarint(data: Buffer, offset: number): [number, number] {\n    if (data[offset] < 0xfd) {\n      return [data[offset], 1];\n    }\n    if (data[offset] === 0xfd) {\n      return [(data[offset + 2] << 8) + data[offset + 1], 3];\n    }\n    if (data[offset] === 0xfe) {\n      return [\n        (data[offset + 4] << 24) +\n          (data[offset + 3] << 16) +\n          (data[offset + 2] << 8) +\n          data[offset + 1],\n        5\n      ];\n    }\n\n    throw new Error(\"getVarint called with unexpected parameters\");\n  }\n\n  startUntrustedHashTransactionInputRaw(\n    newTransaction: boolean,\n    firstRound: boolean,\n    transactionData: Buffer,\n    bip143?: boolean = false,\n    overwinter?: boolean = false\n  ) {\n    const p2 = bip143 ? (overwinter ? 0x04 : 0x02) : 0x00;\n    return this.transport.send(\n      0xe0,\n      0x44,\n      firstRound ? 0x00 : 0x80,\n      newTransaction ? p2 : 0x80,\n      transactionData\n    );\n  }\n\n  startUntrustedHashTransactionInput(\n    newTransaction: boolean,\n    transaction: Transaction,\n    inputs: Array<{ trustedInput: boolean, value: Buffer }>,\n    bip143?: boolean = false,\n    overwinter?: boolean = false\n  ) {\n    let data = Buffer.concat([\n      transaction.version,\n      transaction.timestamp || Buffer.alloc(0),\n      transaction.nVersionGroupId || Buffer.alloc(0),\n      this.createVarint(transaction.inputs.length)\n    ]);\n    return this.startUntrustedHashTransactionInputRaw(\n      newTransaction,\n      true,\n      data,\n      bip143,\n      overwinter\n    ).then(() => {\n      let i = 0;\n      return eachSeries(transaction.inputs, input => {\n        let prefix;\n        if (bip143) {\n          prefix = Buffer.from([0x02]);\n        } else {\n          if (inputs[i].trustedInput) {\n            prefix = Buffer.from([0x01, inputs[i].value.length]);\n          } else {\n            prefix = Buffer.from([0x00]);\n          }\n        }\n        data = Buffer.concat([\n          prefix,\n          inputs[i].value,\n          this.createVarint(input.script.length)\n        ]);\n        return this.startUntrustedHashTransactionInputRaw(\n          newTransaction,\n          false,\n          data,\n          bip143,\n          overwinter\n        ).then(() => {\n          let scriptBlocks = [];\n          let offset = 0;\n          if (input.script.length === 0) {\n            scriptBlocks.push(input.sequence);\n          } else {\n            while (offset !== input.script.length) {\n              let blockSize =\n                input.script.length - offset > MAX_SCRIPT_BLOCK\n                  ? MAX_SCRIPT_BLOCK\n                  : input.script.length - offset;\n              if (offset + blockSize !== input.script.length) {\n                scriptBlocks.push(\n                  input.script.slice(offset, offset + blockSize)\n                );\n              } else {\n                scriptBlocks.push(\n                  Buffer.concat([\n                    input.script.slice(offset, offset + blockSize),\n                    input.sequence\n                  ])\n                );\n              }\n              offset += blockSize;\n            }\n          }\n          return eachSeries(scriptBlocks, scriptBlock => {\n            return this.startUntrustedHashTransactionInputRaw(\n              newTransaction,\n              false,\n              scriptBlock,\n              bip143,\n              overwinter\n            );\n          }).then(() => {\n            i++;\n          });\n        });\n      });\n    });\n  }\n\n  provideOutputFullChangePath(path: string): Promise<string> {\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport.send(0xe0, 0x4a, 0xff, 0x00, buffer);\n  }\n\n  hashOutputFull(outputScript: Buffer): Promise<*> {\n    let offset = 0;\n    return asyncWhile(\n      () => offset < outputScript.length,\n      () => {\n        let blockSize =\n          offset + MAX_SCRIPT_BLOCK >= outputScript.length\n            ? outputScript.length - offset\n            : MAX_SCRIPT_BLOCK;\n        let p1 = offset + blockSize === outputScript.length ? 0x80 : 0x00;\n        let data = outputScript.slice(offset, offset + blockSize);\n        return this.transport.send(0xe0, 0x4a, p1, 0x00, data).then(() => {\n          offset += blockSize;\n        });\n      }\n    );\n  }\n\n  signTransaction(\n    path: string,\n    lockTime?: number = DEFAULT_LOCKTIME,\n    sigHashType?: number = SIGHASH_ALL,\n    expiryHeight?: Buffer\n  ): Promise<Buffer> {\n    const paths = splitPath(path);\n    let offset = 0;\n    const pathsBuffer = Buffer.alloc(paths.length * 4);\n    paths.forEach(element => {\n      pathsBuffer.writeUInt32BE(element, offset);\n      offset += 4;\n    });\n    const lockTimeBuffer = Buffer.alloc(4);\n    lockTimeBuffer.writeUInt32BE(lockTime, 0);\n    let buffer = Buffer.concat([\n      Buffer.from([paths.length]),\n      pathsBuffer,\n      Buffer.from([0x00]),\n      lockTimeBuffer,\n      Buffer.from([sigHashType])\n    ]);\n    if (expiryHeight) {\n      buffer = Buffer.concat([buffer, expiryHeight]);\n    }\n    return this.transport.send(0xe0, 0x48, 0x00, 0x00, buffer).then(result => {\n      if (result.length > 0) {\n        result[0] = 0x30;\n        return result.slice(0, result.length - 2);\n      }\n      return result;\n    });\n  }\n\n  /**\n   * You can sign a message according to the Skycoin Signature format and retrieve v, r, s given the message and the BIP 32 path of the account to sign.\n   * @example\n   sky.signMessageNew_async(\"44'/60'/0'/0'/0\", Buffer.from(\"test\").toString(\"hex\")).then(function(result) {\n     var v = result['v'] + 27 + 4;\n     var signature = Buffer.from(v.toString(16) + result['r'] + result['s'], 'hex').toString('base64');\n     console.log(\"Signature : \" + signature);\n   }).catch(function(ex) {console.log(ex);});\n   */\n  signMessageNew(\n    path: string,\n    messageHex: string\n  ): Promise<{ v: number, r: string, s: string }> {\n    const paths = splitPath(path);\n    const message = new Buffer(messageHex, \"hex\");\n    let offset = 0;\n    const toSend = [];\n    while (offset !== message.length) {\n      let maxChunkSize =\n        offset === 0\n          ? MAX_SCRIPT_BLOCK - 1 - paths.length * 4 - 4\n          : MAX_SCRIPT_BLOCK;\n      let chunkSize =\n        offset + maxChunkSize > message.length\n          ? message.length - offset\n          : maxChunkSize;\n      const buffer = new Buffer(\n        offset === 0 ? 1 + paths.length * 4 + 2 + chunkSize : chunkSize\n      );\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        buffer.writeUInt16BE(message.length, 1 + 4 * paths.length);\n        message.copy(\n          buffer,\n          1 + 4 * paths.length + 2,\n          offset,\n          offset + chunkSize\n        );\n      } else {\n        message.copy(buffer, 0, offset, offset + chunkSize);\n      }\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n    return foreach(toSend, (data, i) =>\n      this.transport.send(0xe0, 0x4e, 0x00, i === 0 ? 0x01 : 0x80, data)\n    ).then(() => {\n      return this.transport\n        .send(0xe0, 0x4e, 0x80, 0x00, Buffer.from([0x00]))\n        .then(response => {\n          const v = response[0] - 0x30;\n          let r = response.slice(4, 4 + response[3]);\n          if (r[0] === 0) {\n            r = r.slice(1);\n          }\n          r = r.toString(\"hex\");\n          let offset = 4 + response[3] + 2;\n          let s = response.slice(offset, offset + response[offset - 1]);\n          if (s[0] === 0) {\n            s = s.slice(1);\n          }\n          s = s.toString(\"hex\");\n          return { v, r, s };\n        });\n    });\n  }\n\n  /**\n   * To sign a transaction involving standard (P2PKH) inputs, call createPaymentTransactionNew with the following parameters\n   * @param inputs is an array of [ transaction, output_index, optional redeem script, optional sequence ] where\n   *\n   * * transaction is the previously computed transaction object for this UTXO\n   * * output_index is the output in the transaction used as input for this UTXO (counting from 0)\n   * * redeem script is the optional redeem script to use when consuming a Segregated Witness input\n   * * sequence is the sequence number to use for this input (when using RBF), or non present\n   * @param associatedKeysets is an array of BIP 32 paths pointing to the path to the private key used for each UTXO\n   * @param changePath is an optional BIP 32 path pointing to the path to the public key used to compute the change address\n   * @param outputScriptHex is the hexadecimal serialized outputs of the transaction to sign\n   * @param lockTime is the optional lockTime of the transaction to sign, or default (0)\n   * @param sigHashType is the hash type of the transaction to sign, or default (all)\n   * @param segwit is an optional boolean indicating wether to use segwit or not\n   * @param initialTimestamp is an optional timestamp of the function call to use for coins that necessitate timestamps only, (not the one that the tx will include)\n   * @param additionals list of additionnal options (\"abc\" for bch, \"gold\" for btg, \"bipxxx\" for using BIPxxx)\n   * @param expiryHeight is an optional Buffer for zec overwinter Txs\n   * @return the signed transaction ready to be broadcast\n   * @example\nsky.createPaymentTransactionNew(\n   [ [tx1, 1] ],\n   [\"0'/0/0\"],\n   undefined,\n   \"01905f0100000000001976a91472a5d75c8d2d0565b656a5232703b167d50d5a2b88ac\"\n ).then(res => ...);\n   */\n  createPaymentTransactionNew(\n    inputs: Array<[Transaction, number, ?string, ?number]>,\n    associatedKeysets: string[],\n    changePath?: string,\n    outputScriptHex: string,\n    lockTime?: number = DEFAULT_LOCKTIME,\n    sigHashType?: number = SIGHASH_ALL,\n    segwit?: boolean = false,\n    initialTimestamp?: number,\n    additionals?: Array<string>,\n    expiryHeight?: Buffer\n  ) {\n    const hasTimestamp = initialTimestamp !== undefined;\n    let startTime = Date.now();\n    let useBip143 =\n      segwit ||\n      (!!additionals &&\n        (additionals.includes(\"abc\") ||\n          additionals.includes(\"gold\") ||\n          additionals.includes(\"bip143\"))) ||\n      !!expiryHeight;\n    // Inputs are provided as arrays of [transaction, output_index, optional redeem script, optional sequence]\n    // associatedKeysets are provided as arrays of [path]\n    const nullScript = Buffer.alloc(0);\n    const nullPrevout = Buffer.alloc(0);\n    const defaultVersion = Buffer.alloc(4);\n    expiryHeight\n      ? defaultVersion.writeUInt32LE(0x80000003, 0)\n      : defaultVersion.writeUInt32LE(1, 0);\n    const trustedInputs: Array<*> = [];\n    const regularOutputs: Array<TransactionOutput> = [];\n    const signatures = [];\n    const publicKeys = [];\n    let firstRun = true;\n    const resuming = false;\n    const targetTransaction: Transaction = {\n      inputs: [],\n      version: defaultVersion,\n      timestamp: Buffer.alloc(0)\n    };\n    const getTrustedInputCall = useBip143\n      ? this.getTrustedInputBIP143.bind(this)\n      : this.getTrustedInput.bind(this);\n    const outputScript = Buffer.from(outputScriptHex, \"hex\");\n\n    return foreach(inputs, input => {\n      return doIf(!resuming, () =>\n        getTrustedInputCall(input[1], input[0]).then(trustedInput => {\n          let sequence = Buffer.alloc(4);\n          sequence.writeUInt32LE(\n            input.length >= 4 && typeof input[3] === \"number\"\n              ? input[3]\n              : DEFAULT_SEQUENCE,\n            0\n          );\n          trustedInputs.push({\n            trustedInput: true,\n            value: Buffer.from(trustedInput, \"hex\"),\n            sequence\n          });\n        })\n      )\n        .then(() => {\n          const { outputs } = input[0];\n          const index = input[1];\n          if (outputs && index <= outputs.length - 1) {\n            regularOutputs.push(outputs[index]);\n          }\n        })\n        .then(() => {\n          if (expiryHeight) {\n            targetTransaction.nVersionGroupId = Buffer.from([\n              0x70,\n              0x82,\n              0xc4,\n              0x03\n            ]);\n            targetTransaction.nExpiryHeight = expiryHeight;\n            targetTransaction.extraData = Buffer.from([0x00]);\n          }\n        });\n    })\n      .then(() => {\n        for (let i = 0; i < inputs.length; i++) {\n          let sequence = Buffer.alloc(4);\n          sequence.writeUInt32LE(\n            inputs[i].length >= 4 && typeof inputs[i][3] === \"number\"\n              ? inputs[i][3]\n              : DEFAULT_SEQUENCE,\n            0\n          );\n          targetTransaction.inputs.push({\n            script: nullScript,\n            prevout: nullPrevout,\n            sequence\n          });\n        }\n      })\n      .then(() =>\n        doIf(!resuming, () =>\n          // Collect public keys\n          foreach(inputs, (input, i) =>\n            this.getWalletPublicKey_private(associatedKeysets[i], false, false)\n          ).then(result => {\n            for (let index = 0; index < result.length; index++) {\n              publicKeys.push(\n                this.compressPublicKey(\n                  Buffer.from(result[index].publicKey, \"hex\")\n                )\n              );\n            }\n          })\n        )\n      )\n      .then(() => {\n        if (hasTimestamp) {\n          targetTransaction.timestamp = Buffer.alloc(4);\n          targetTransaction.timestamp.writeUInt32LE(\n            Math.floor(initialTimestamp + (Date.now() - startTime) / 1000),\n            0\n          );\n        }\n      })\n      .then(() =>\n        doIf(useBip143, () =>\n          // Do the first run with all inputs\n          this.startUntrustedHashTransactionInput(\n            true,\n            targetTransaction,\n            trustedInputs,\n            true,\n            !!expiryHeight\n          ).then(() =>\n            doIf(!resuming && typeof changePath != \"undefined\", () => {\n              // $FlowFixMe\n              return this.provideOutputFullChangePath(changePath);\n            }).then(() => this.hashOutputFull(outputScript))\n          )\n        )\n      )\n      .then(() =>\n        doIf(!!expiryHeight, () =>\n          this.signTransaction(\"\", undefined, SIGHASH_ALL, expiryHeight)\n        )\n      )\n      .then(() =>\n        // Do the second run with the individual transaction\n        foreach(inputs, (input, i) => {\n          let script =\n            inputs[i].length >= 3 && typeof inputs[i][2] === \"string\"\n              ? Buffer.from(inputs[i][2], \"hex\")\n              : !segwit\n                ? regularOutputs[i].script\n                : Buffer.concat([\n                    Buffer.from([OP_PUSHDATA1, OP_HASH160, HASH_SIZE]),\n                    this.hashPublicKey(publicKeys[i]),\n                    Buffer.from([OP_EQUALVERIFY, OP_CHECKSIG])\n                  ]);\n          let pseudoTX = Object.assign({}, targetTransaction);\n          let pseudoTrustedInputs = useBip143\n            ? [trustedInputs[i]]\n            : trustedInputs;\n          if (useBip143) {\n            pseudoTX.inputs = [{ ...pseudoTX.inputs[i], script }];\n          } else {\n            pseudoTX.inputs[i].script = script;\n          }\n          return this.startUntrustedHashTransactionInput(\n            !useBip143 && firstRun,\n            pseudoTX,\n            pseudoTrustedInputs,\n            useBip143,\n            !!expiryHeight\n          )\n            .then(() =>\n              doIf(!useBip143, () =>\n                doIf(!resuming && typeof changePath != \"undefined\", () => {\n                  // $FlowFixMe\n                  return this.provideOutputFullChangePath(changePath);\n                }).then(() => this.hashOutputFull(outputScript))\n              )\n            )\n            .then(() =>\n              this.signTransaction(\n                associatedKeysets[i],\n                lockTime,\n                sigHashType,\n                expiryHeight\n              )\n            )\n            .then(signature => {\n              signatures.push(signature);\n              targetTransaction.inputs[i].script = nullScript;\n              if (firstRun) {\n                firstRun = false;\n              }\n            });\n        })\n      )\n      .then(() => {\n        // Populate the final input scripts\n        for (let i = 0; i < inputs.length; i++) {\n          if (segwit) {\n            targetTransaction.witness = Buffer.alloc(0);\n            targetTransaction.inputs[i].script = Buffer.concat([\n              Buffer.from(\"160014\", \"hex\"),\n              this.hashPublicKey(publicKeys[i])\n            ]);\n          } else {\n            const signatureSize = Buffer.alloc(1);\n            const keySize = Buffer.alloc(1);\n            signatureSize[0] = signatures[i].length;\n            keySize[0] = publicKeys[i].length;\n            targetTransaction.inputs[i].script = Buffer.concat([\n              signatureSize,\n              signatures[i],\n              keySize,\n              publicKeys[i]\n            ]);\n          }\n          let offset = useBip143 ? 0 : 4;\n          targetTransaction.inputs[i].prevout = trustedInputs[i].value.slice(\n            offset,\n            offset + 0x24\n          );\n        }\n\n        const lockTimeBuffer = Buffer.alloc(4);\n        lockTimeBuffer.writeUInt32LE(lockTime, 0);\n\n        var result = Buffer.concat([\n          this.serializeTransaction(\n            targetTransaction,\n            false,\n            targetTransaction.timestamp\n          ),\n          outputScript\n        ]);\n\n        if (segwit) {\n          var witness = Buffer.alloc(0);\n          for (var i = 0; i < inputs.length; i++) {\n            var tmpScriptData = Buffer.concat([\n              Buffer.from(\"02\", \"hex\"),\n              Buffer.from([signatures[i].length]),\n              signatures[i],\n              Buffer.from([publicKeys[i].length]),\n              publicKeys[i]\n            ]);\n            witness = Buffer.concat([witness, tmpScriptData]);\n          }\n          result = Buffer.concat([result, witness]);\n        }\n        if (expiryHeight) {\n          result = Buffer.concat([\n            result,\n            targetTransaction.nExpiryHeight || Buffer.alloc(0),\n            targetTransaction.extraData || Buffer.alloc(0)\n          ]);\n        }\n\n        result = Buffer.concat([result, lockTimeBuffer]);\n\n        return result.toString(\"hex\");\n      });\n  }\n\n  /**\n   * To obtain the signature of multisignature (P2SH) inputs, call signP2SHTransaction_async with the folowing parameters\n   * @param inputs is an array of [ transaction, output_index, redeem script, optional sequence ] where\n   * * transaction is the previously computed transaction object for this UTXO\n   * * output_index is the output in the transaction used as input for this UTXO (counting from 0)\n   * * redeem script is the mandatory redeem script associated to the current P2SH input\n   * * sequence is the sequence number to use for this input (when using RBF), or non present\n   * @param associatedKeysets is an array of BIP 32 paths pointing to the path to the private key used for each UTXO\n   * @param outputScriptHex is the hexadecimal serialized outputs of the transaction to sign\n   * @param lockTime is the optional lockTime of the transaction to sign, or default (0)\n   * @param sigHashType is the hash type of the transaction to sign, or default (all)\n   * @return the signed transaction ready to be broadcast\n   * @example\nsky.signP2SHTransaction(\n [ [tx, 1, \"52210289b4a3ad52a919abd2bdd6920d8a6879b1e788c38aa76f0440a6f32a9f1996d02103a3393b1439d1693b063482c04bd40142db97bdf139eedd1b51ffb7070a37eac321030b9a409a1e476b0d5d17b804fcdb81cf30f9b99c6f3ae1178206e08bc500639853ae\"] ],\n [\"0'/0/0\"],\n \"01905f0100000000001976a91472a5d75c8d2d0565b656a5232703b167d50d5a2b88ac\"\n).then(result => ...);\n   */\n  signP2SHTransaction(\n    inputs: Array<[Transaction, number, ?string, ?number]>,\n    associatedKeysets: string[],\n    outputScriptHex: string,\n    lockTime?: number = DEFAULT_LOCKTIME,\n    sigHashType?: number = SIGHASH_ALL,\n    segwit?: boolean = false,\n    transactionVersion?: number = DEFAULT_VERSION\n  ) {\n    // Inputs are provided as arrays of [transaction, output_index, redeem script, optional sequence]\n    // associatedKeysets are provided as arrays of [path]\n    const nullScript = Buffer.alloc(0);\n    const nullPrevout = Buffer.alloc(0);\n    const defaultVersion = Buffer.alloc(4);\n    defaultVersion.writeUInt32LE(transactionVersion, 0);\n    const trustedInputs = [];\n    const regularOutputs: Array<TransactionOutput> = [];\n    const signatures = [];\n    let firstRun = true;\n    const resuming = false;\n    let targetTransaction: Transaction = {\n      inputs: [],\n      version: defaultVersion\n    };\n\n    const getTrustedInputCall = segwit\n      ? this.getTrustedInputBIP143.bind(this)\n      : this.getTrustedInput.bind(this);\n    const outputScript = Buffer.from(outputScriptHex, \"hex\");\n\n    return foreach(inputs, input =>\n      doIf(!resuming, () =>\n        getTrustedInputCall(input[1], input[0]).then(trustedInput => {\n          let sequence = Buffer.alloc(4);\n          sequence.writeUInt32LE(\n            input.length >= 4 && typeof input[3] === \"number\"\n              ? input[3]\n              : DEFAULT_SEQUENCE,\n            0\n          );\n          trustedInputs.push({\n            trustedInput: false,\n            value: segwit\n              ? Buffer.from(trustedInput, \"hex\")\n              : Buffer.from(trustedInput, \"hex\").slice(4, 4 + 0x24),\n            sequence\n          });\n        })\n      ).then(() => {\n        const { outputs } = input[0];\n        const index = input[1];\n        if (outputs && index <= outputs.length - 1) {\n          regularOutputs.push(outputs[index]);\n        }\n      })\n    )\n      .then(() => {\n        // Pre-build the target transaction\n        for (let i = 0; i < inputs.length; i++) {\n          let sequence = Buffer.alloc(4);\n          sequence.writeUInt32LE(\n            inputs[i].length >= 4 && typeof inputs[i][3] === \"number\"\n              ? inputs[i][3]\n              : DEFAULT_SEQUENCE,\n            0\n          );\n          targetTransaction.inputs.push({\n            script: nullScript,\n            prevout: nullPrevout,\n            sequence\n          });\n        }\n      })\n      .then(() =>\n        doIf(segwit, () =>\n          // Do the first run with all inputs\n          this.startUntrustedHashTransactionInput(\n            true,\n            targetTransaction,\n            trustedInputs,\n            true\n          ).then(() => this.hashOutputFull(outputScript))\n        )\n      )\n      .then(() =>\n        foreach(inputs, (input, i) => {\n          let script =\n            inputs[i].length >= 3 && typeof inputs[i][2] === \"string\"\n              ? Buffer.from(inputs[i][2], \"hex\")\n              : regularOutputs[i].script;\n          let pseudoTX = Object.assign({}, targetTransaction);\n          let pseudoTrustedInputs = segwit ? [trustedInputs[i]] : trustedInputs;\n          if (segwit) {\n            pseudoTX.inputs = [{ ...pseudoTX.inputs[i], script }];\n          } else {\n            pseudoTX.inputs[i].script = script;\n          }\n          return this.startUntrustedHashTransactionInput(\n            !segwit && firstRun,\n            pseudoTX,\n            pseudoTrustedInputs,\n            segwit\n          )\n            .then(() => doIf(!segwit, () => this.hashOutputFull(outputScript)))\n            .then(() =>\n              this.signTransaction(\n                associatedKeysets[i],\n                lockTime,\n                sigHashType\n              ).then(signature => {\n                signatures.push(\n                  segwit\n                    ? signature.toString(\"hex\")\n                    : signature.slice(0, signature.length - 1).toString(\"hex\")\n                );\n                targetTransaction.inputs[i].script = nullScript;\n                if (firstRun) {\n                  firstRun = false;\n                }\n              })\n            );\n        })\n      )\n      .then(() => signatures);\n  }\n\n  compressPublicKey(publicKey: Buffer): Buffer {\n    const prefix = (publicKey[64] & 1) !== 0 ? 0x03 : 0x02;\n    const prefixBuffer = Buffer.alloc(1);\n    prefixBuffer[0] = prefix;\n    return Buffer.concat([prefixBuffer, publicKey.slice(1, 1 + 32)]);\n  }\n\n  createVarint(value: number): Buffer {\n    if (value < 0xfd) {\n      const buffer = Buffer.alloc(1);\n      buffer[0] = value;\n      return buffer;\n    }\n    if (value <= 0xffff) {\n      const buffer = Buffer.alloc(3);\n      buffer[0] = 0xfd;\n      buffer[1] = value & 0xff;\n      buffer[2] = (value >> 8) & 0xff;\n      return buffer;\n    }\n    const buffer = Buffer.alloc(5);\n    buffer[0] = 0xfe;\n    buffer[1] = value & 0xff;\n    buffer[2] = (value >> 8) & 0xff;\n    buffer[3] = (value >> 16) & 0xff;\n    buffer[4] = (value >> 24) & 0xff;\n    return buffer;\n  }\n\n  /**\n   * For each UTXO included in your transaction, create a transaction object from the raw serialized version of the transaction used in this UTXO.\n   * @example\nconst tx1 = sky.splitTransaction(\"01000000014ea60aeac5252c14291d428915bd7ccd1bfc4af009f4d4dc57ae597ed0420b71010000008a47304402201f36a12c240dbf9e566bc04321050b1984cd6eaf6caee8f02bb0bfec08e3354b022012ee2aeadcbbfd1e92959f57c15c1c6debb757b798451b104665aa3010569b49014104090b15bde569386734abf2a2b99f9ca6a50656627e77de663ca7325702769986cf26cc9dd7fdea0af432c8e2becc867c932e1b9dd742f2a108997c2252e2bdebffffffff0281b72e00000000001976a91472a5d75c8d2d0565b656a5232703b167d50d5a2b88aca0860100000000001976a9144533f5fb9b4817f713c48f0bfe96b9f50c476c9b88ac00000000\");\n   */\n  splitTransaction(\n    transactionHex: string,\n    isSegwitSupported: ?boolean = false,\n    hasTimestamp?: boolean = false,\n    hasExtraData?: boolean = false\n  ): Transaction {\n    const inputs = [];\n    const outputs = [];\n    var witness = false;\n    let offset = 0;\n    let timestamp = Buffer.alloc(0);\n    let nExpiryHeight = Buffer.alloc(0);\n    let nVersionGroupId = Buffer.alloc(0);\n    let extraData = Buffer.alloc(0);\n    const transaction = Buffer.from(transactionHex, \"hex\");\n    const version = transaction.slice(offset, offset + 4);\n    const overwinter = version.equals(Buffer.from([0x03, 0x00, 0x00, 0x80]));\n    offset += 4;\n    if (\n      !hasTimestamp &&\n      isSegwitSupported &&\n      (transaction[offset] === 0 && transaction[offset + 1] !== 0)\n    ) {\n      offset += 2;\n      witness = true;\n    }\n    if (hasTimestamp) {\n      timestamp = transaction.slice(offset, 4 + offset);\n      offset += 4;\n    }\n    if (overwinter) {\n      nVersionGroupId = transaction.slice(offset, 4 + offset);\n      offset += 4;\n    }\n    let varint = this.getVarint(transaction, offset);\n    const numberInputs = varint[0];\n    offset += varint[1];\n    for (let i = 0; i < numberInputs; i++) {\n      const prevout = transaction.slice(offset, offset + 36);\n      offset += 36;\n      varint = this.getVarint(transaction, offset);\n      offset += varint[1];\n      const script = transaction.slice(offset, offset + varint[0]);\n      offset += varint[0];\n      const sequence = transaction.slice(offset, offset + 4);\n      offset += 4;\n      inputs.push({ prevout, script, sequence });\n    }\n    varint = this.getVarint(transaction, offset);\n    const numberOutputs = varint[0];\n    offset += varint[1];\n    for (let i = 0; i < numberOutputs; i++) {\n      const amount = transaction.slice(offset, offset + 8);\n      offset += 8;\n      varint = this.getVarint(transaction, offset);\n      offset += varint[1];\n      const script = transaction.slice(offset, offset + varint[0]);\n      offset += varint[0];\n      outputs.push({ amount, script });\n    }\n    var witnessScript, locktime;\n    if (witness) {\n      witnessScript = transaction.slice(offset, -4);\n      locktime = transaction.slice(transaction.length - 4);\n    } else {\n      locktime = transaction.slice(offset, offset + 4);\n    }\n    offset += 4;\n    if (overwinter) {\n      nExpiryHeight = transaction.slice(offset, offset + 4);\n      offset += 4;\n    }\n    if (hasExtraData) {\n      extraData = transaction.slice(offset);\n    }\n    return {\n      version,\n      inputs,\n      outputs,\n      locktime,\n      witness: witnessScript,\n      timestamp,\n      nVersionGroupId,\n      nExpiryHeight,\n      extraData\n    };\n  }\n\n  /**\n  @example\nconst tx1 = sky.splitTransaction(\"01000000014ea60aeac5252c14291d428915bd7ccd1bfc4af009f4d4dc57ae597ed0420b71010000008a47304402201f36a12c240dbf9e566bc04321050b1984cd6eaf6caee8f02bb0bfec08e3354b022012ee2aeadcbbfd1e92959f57c15c1c6debb757b798451b104665aa3010569b49014104090b15bde569386734abf2a2b99f9ca6a50656627e77de663ca7325702769986cf26cc9dd7fdea0af432c8e2becc867c932e1b9dd742f2a108997c2252e2bdebffffffff0281b72e00000000001976a91472a5d75c8d2d0565b656a5232703b167d50d5a2b88aca0860100000000001976a9144533f5fb9b4817f713c48f0bfe96b9f50c476c9b88ac00000000\");\nconst outputScript = sky.serializeTransactionOutputs(tx1).toString('hex');\n  */\n  serializeTransactionOutputs({ outputs }: Transaction): Buffer {\n    let outputBuffer = Buffer.alloc(0);\n    if (typeof outputs !== \"undefined\") {\n      outputBuffer = Buffer.concat([\n        outputBuffer,\n        this.createVarint(outputs.length)\n      ]);\n      outputs.forEach(output => {\n        outputBuffer = Buffer.concat([\n          outputBuffer,\n          output.amount,\n          this.createVarint(output.script.length),\n          output.script\n        ]);\n      });\n    }\n    return outputBuffer;\n  }\n\n  /**\n   */\n  serializeTransaction(\n    transaction: Transaction,\n    skipWitness: boolean,\n    timestamp?: Buffer\n  ) {\n    let inputBuffer = Buffer.alloc(0);\n    let useWitness =\n      typeof transaction[\"witness\"] != \"undefined\" && !skipWitness;\n    transaction.inputs.forEach(input => {\n      inputBuffer = Buffer.concat([\n        inputBuffer,\n        input.prevout,\n        this.createVarint(input.script.length),\n        input.script,\n        input.sequence\n      ]);\n    });\n\n    let outputBuffer = this.serializeTransactionOutputs(transaction);\n    if (\n      typeof transaction.outputs !== \"undefined\" &&\n      typeof transaction.locktime !== \"undefined\"\n    ) {\n      outputBuffer = Buffer.concat([\n        outputBuffer,\n        (useWitness && transaction.witness) || Buffer.alloc(0),\n        transaction.locktime,\n        transaction.nExpiryHeight || Buffer.alloc(0),\n        transaction.extraData || Buffer.alloc(0)\n      ]);\n    }\n\n    return Buffer.concat([\n      transaction.version,\n      timestamp ? timestamp : Buffer.alloc(0),\n      transaction.nVersionGroupId || Buffer.alloc(0),\n      useWitness ? Buffer.from(\"0001\", \"hex\") : Buffer.alloc(0),\n      this.createVarint(transaction.inputs.length),\n      inputBuffer,\n      outputBuffer\n    ]);\n  }\n\n  /**\n   */\n  displayTransactionDebug(transaction: Transaction) {\n    console.log(\"version \" + transaction.version.toString(\"hex\"));\n    transaction.inputs.forEach((input, i) => {\n      const prevout = input.prevout.toString(\"hex\");\n      const script = input.script.toString(\"hex\");\n      const sequence = input.sequence.toString(\"hex\");\n      console.log(\n        `input ${i} prevout ${prevout} script ${script} sequence ${sequence}`\n      );\n    });\n    (transaction.outputs || []).forEach((output, i) => {\n      const amount = output.amount.toString(\"hex\");\n      const script = output.script.toString(\"hex\");\n      console.log(`output ${i} amount ${amount} script ${script}`);\n    });\n    if (typeof transaction.locktime !== \"undefined\") {\n      console.log(\"locktime \" + transaction.locktime.toString(\"hex\"));\n    }\n  }\n}\n\n/**\n */\ntype TransactionInput = {\n  prevout: Buffer,\n  script: Buffer,\n  sequence: Buffer\n};\n\n/**\n */\ntype TransactionOutput = {\n  amount: Buffer,\n  script: Buffer\n};\n\n/**\n */\ntype Transaction = {\n  version: Buffer,\n  inputs: TransactionInput[],\n  outputs?: TransactionOutput[],\n  locktime?: Buffer,\n  witness?: Buffer,\n  timestamp?: Buffer,\n  nVersionGroupId?: Buffer,\n  nExpiryHeight?: Buffer,\n  extraData?: Buffer\n};\n"]}